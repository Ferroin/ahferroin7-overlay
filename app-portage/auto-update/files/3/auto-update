#!/usr/bin/env python3
#vi: set sw=4 :
# auto-update: an automatic updater for Gentoo
# Copyright (C) 2013  Austin S. Hemmelgarn
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

import os
import smtplib

def main():
    import argparse
    parser = argparse.ArgumentParser('Automated updates for gentoo.')
    parser.add_argument('-c', '--config', default='/etc/auto-update.conf',
    help='Specify an alternate configuration file to use.',
    dest='config')
    args = parser.parse_args()
    del argparse
    del parser
    import configparser
    from socket import getfqdn
    config = configparser.ConfigParser()
    config.read(args.config)
    MAILSERVER=config['mail']['server']
    MAILUSER=config['mail']['user']
    MAILPASS=config['mail']['pass']
    DESTADDR=config['mail']['destination']
    FROMADDR='auto-update@' + getfqdn()
    SYNC=config['gentoo'].getboolean('sync')
    LAYMAN=config['gentoo'].getboolean('layman')
    EIX=config['gentoo'].getboolean('eix')
    DEPCLEAN=config['gentoo'].getboolean('depclean')
    ECLEAN=config['gentoo'].getboolean('eclean')
    KERNCHECK=config['gentoo'].getboolean('kernel_check')
    KPKG=config['gentoo']['kernel_package']
    PYTHONUPDATE=config['gentoo'].getboolean('python_update')
    PERLCLEAN=config['gentoo'].getboolean('perl_cleaner')
    REVDEPREBUILD=config['gentoo'].getboolean('revdep_rebuild')
    PRESERVEDREBUILD=config['gentoo'].getboolean('preserved_rebuild')
    del configparser
    del config
    del getfqdn
    del args

    if MAILSERVER == None:
        MAILSERVER = 'localhost'

    if DESTADDR == None:
        DESTADDR = 'root@localhost'

    msg = 'From: ' + FROMADDR +'\r\n'
    msg += 'To: ' + DESTADDR + '\r\n'
    extra_msg = ''
    os.system('touch /var/tmp/auto-update.tmp ; truncate -s 0 /var/tmp/auto-update.tmp')

    def send_message(msg):
        server = smtplib.SMTP()
        server.connect(MAILSERVER)
        if MAILUSER and MAILPASS:
            server.login(MAILUSER, MAILPASS)
        server.sendmail(msg)
        server.quit()
        return True

    def getoutput(command):
        os.system(command + ' > /var/tmp/auto-update.tmp'
        with open('/var/tmp/auto-update.tmp', 'r') as tmp:
            rdata = tmp.read()
            tmp.truncate(size=0)
            return rdata

    if SYNC:
        retval = os.system('emerge --sync 2>&1 | tee /var/log/auto-update/emerge-sync.log')
        if retval != 0:
            with open('/var/log/auto-update/emerge-sync.log', 'r') as log:
                sync_output = log.read()
            msg += 'Subject: Update Failed\r\n\r\n'
            msg += 'Update failed while running `emerge --sync`\r\n'
            msg += 'Command output:\r\n' + sync_output.replace('\n', '\r\n')
            send_message(msg)
            return 1

    if LAYMAN:
        retval = os.system('layman -S 2>&1 | tee /var/log/auto-update/layman-sync.log')
        if retval != 0:
            with open('/var/log/auto-update/layman-sync.log', 'r') as log:
                layman_output = log.read()
            msg += 'Subject: Update Failed\r\n\r\n'
            msg += 'Update failed while running `layman -S`\r\n'
            msg += 'Command output:\r\n' + layman_output.replace('\n', '\r\n')
            send_message(msg)
            return 1

    if EIX:
        os.system('eix-update')

    # Use equery to determine the current portage ebuild, and the newest
    # installable (non-masked) portage ebuild
    current_portage = getoutput('equery which =`equery --quiet --no-color list --format \\$cpv portage`')
    max_portage = getoutput('equery which portage')

    # If the ebuild paths don't match, then we need to update portage
    if max_portage != current_portage:
        retval = os.system('emerge --oneshot portage 2>&1 | tee /var/log/auto-update/portage-update.log')
        if retval != 0:
            with open('/var/log/auto-update/portage-update.log', 'r') as log:
                portupdate = log.read()
            msg += 'Subject: Automatic Update Failed\r\n\r\n'
            msg += 'Update failed while running `emerge --oneshot portage`\r\n'
            msg += 'Command output:\r\n' + portupdate.replace('\n', '\r\n')
            send_message(msg)
            return 1

    pyversions = getoutput('equery -q -C list --format=\\$cpv dev-lang/python dev-java/jython dev-python/pypy dev-python/pypy-bin').splitlines()

    perlversion = getoutput('perl --version')

    retval = os.system('emerge --update --deep --with-bdeps=y world 2>&1 | tee /var/log/auto-update/update.log')
    if retval != 0:
        with open('/var/log/auto-update/update.log', 'r') as log:
            update = log.read()
        msg += 'Subject: Automatic Update Failed\r\n\r\n'
        msg += 'Update failed while running `emerge --update --deep --with-bdeps=y --newuse world\r\n'
        msg += 'Command output:\r\n' + update.replace('\n', '\r\n')
        send_message(msg)
        return 1

    if PRESERVEDREBUILD:
        retval = os.system('emerge --oneshot @preserved-rebuild 2>&1 | tee /var/log/auto-update/preserved-rebuild.log')
        if retval != 0:
            extra_msg += 'Running `emerge --oneshot @preserved-rebuild` failed.\r\n'
            extra_msg += 'You should almost certaily rerun it manually.\r\n\r\n'

    newpyversions = getoutput('equery -q -C list --format=\\$cpv dev-lang/python dev-java/jython dev-python/pypy dev-python/pypy-bin').splitlines()
    if pyversions != newpyversions:
        if PYTHONUPDATE:
            retval = os.system('python-updater')
            if retval != 0:
                extra_msg += 'Running python-updater failed, it needs to be rerun manually.\r\n\r\n'
        else:
            extra_msg += 'Python has been updated, you should probably run python-updater.\r\n\r\n'

    newperlversion = getoutput('perl --version')
    if perlversion != newperlversion:
        if PERLCLEAN:
                retval = os.system('perl-cleaner --all')
            if retval != 0:
                extra_msg += 'Running perl-cleaner failed, it needs to be rerun manually.\r\n\r\n'
        else:
            extra_msg += 'Perl has been updated, you need to run perl-cleaner.\r\n\r\n'

    if DEPCLEAN:
        os.system('emerge --depclean')

    if REVDEPREBUILD:
        os.system('revdep-rebuild')

    if ECLEAN:
        os.system('eclean -dv packages')
        os.system('eclean -dv distfiles')

    os.system('etc-update -p')

    msg += 'Subject: Automatic Update Successful\r\n\r\n'

    confupdate = getoutput('ls -R /etc | grep -c ._cfg -')

    msg += confupdate + ' config files need to be manually merged.\r\n\r\n'

    if KERNCHECK:
        kversion_current = getoutput('uname -v').partition('-')[0]
        kversion_source = getoutput('equery -q -C list --format=$fullversion ' + KPKG)
        if kversion_current != kversion_source:
            msg += 'Kernel sources have been updated, kernel rebuild required.\r\n'
            msg += 'Don\'t forget to update any out of tree modules as well.\r\n'

    msg += extra_msg
    send_message(msg)
    return 0

if __name__ == '__main__':
    exit(main())
