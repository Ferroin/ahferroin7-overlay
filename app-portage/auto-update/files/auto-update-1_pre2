#!/usr/bin/env python3
#vi: set sw=4 :
# auto-update: an automatic updater for Gentoo
# Copyright (C) 2013  Austin S. Hemmelgarn
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

import subprocess
import smtplib

def main() {
    import argparse
    parser = argparse.ArgumentParser('Automated updates for gentoo.')
    parser.add_argument('-c', '--config', default='/etc/auto-update.conf',
    help='Specify an alternate configuration file to use.',
    target='config')
    parser.parse_args()
    del argparse
    import configparser
    from socket import getfqdn
    config = configparser.ConfigParser()
    config.read(parser.config)
    MAILSERVER=config['mail']['server']
    MAILUSER=config['mail']['user']
    MAILPASS=config['mail']['pass']
    DESTADDR=config['mail']['destination']
    FROMADDR='auto-update@' + getfqdn()
    SYNC=config.getBoolean('gentoo', 'sync')
    EIX=config.getBoolean('gentoo', 'eix')
    DEPCLEAN=config.getBoolean('gentoo', 'depclean')
    ECLEAN=config.getBoolean('gentoo', 'eclean')
    KERNCHECK=config.getBoolean('gentoo', 'kernel_check')
    del configparser
    del config
    del getfqdn
    del parser

    if MAILSERVER == None:
        MAILSERVER = 'localhost'

    if DESTADDR == None:
        DESTADDR = 'root@localhost'

    msg = 'From: ' + FROMADDR +'\r\n'
    msg += 'To: ' + DESTADDR + '\r\n'
    null = open('/dev/null', 'r+b')

    def send_message(msg):
        server = smtplib.SMTP()
        server.connect(MAILSERVER)
	if MAILUSER and MAILPASS:
        server.login(MAILUSER, MAILPASS)
        server.sendmail(msg)
        server.quit()
        return True

    if SYNC:
        try:
            sync_output = subprocess.check_output('emerge', '--sync',
                          stderr=subprocess.STDOUT, universal_newline=True)
        except subprocess.CalledProcessError:
            msg += 'Subject: Update Failed\r\n\r\n'
            msg += 'Update failed while running `emerge --sync`\r\n'
            msg += 'Command output:\r\n' + sync_output.replace('\n', '\r\n')
            send_message(msg)
            return 1

    if EIX:
        subprocess.call('eix-update', stdout=null, stderr=null)

    # Use equery to determine the current portage ebuild, and the newest
    # installable portage ebuild
    current_portage = subprocess.check_output('equery', '--quiet', '--no-color',
                      'list', '--format=$cpv', 'portage', universal_newlines=True)
    current_portage = subprocess.check_output('equery', 'which',
                      '=' + current_portage, universal_newlines=True)
    max_portage = subprocess.check_output('equery', 'which', 'portage',
                  universal_newlines=True)

    # If the ebuild paths don't match, then we need to update portage
    if not max_portage == current_portage:
        portage_update = True
        try:
            portupdate = subprocess.check_output('emerge', '--oneshot', 'portage',
                     stderr=subprocess.STDOUT, universal_newlines=True)
        except subprocess.CalledProcessError:
            msg += 'Subject: Automatic Update Failed\r\n\r\n'
            msg += 'Update failed while running `emerge --oneshot portage`\r\n'
            msg += 'Command output:\r\n' + portupdate.replace('\n', '\r\n')
            send_message(msg)
            return 1
    else:
        portage_update = False

    try:
        update = subprocess.check_output('emerge', '--update', '--deep',
                 '--with-bdeps=y', '--newuse', 'world', stdout=subprocess.STDOUT,
                 universal_newline=True)
    except subprocess.CalledProcessError:
        msg += 'Subject: Automatic Update Failed\r\n\r\n'
        msg += 'Update failed while running `emerge --update --deep --with-bdeps=y --newuse world\r\n'
        msg += 'Command output:\r\n' + update.replace('\n', '\r\n')
        send_message(msg)
        return 1

    if DEPCLEAN:
        subprocess.call('emerge', '--depclean', stdout=null, stderr=null)
        subprocess.call('revdep-rebuild', stdout=null, stderr=null)

    if ECLEAN:
        subprocess.call('eclean -dv packages', stdout=null, stderr=null)
        subprocess.call('eclean -dv distfiles', stdout=null, stderr=null)

    subprocess.call('etc-update', '-p')

    msg += 'Subject: Automatic Update Successful\r\n\r\n'

    confupdate = subprocess.check_output('ls', '-R', '/etc')
    confupdate = subprocess.check_output('grep', '-c', '._cfg', confupdate)

    msg += confupdate + ' config files need to be manually merged.'

    if KERNCHECK:
        kversion_current = subprocess.check_output('uname', '-v').partition('-')[0]
        kversion_source = subprocess.check_output('equery', '-q', '-C', 'list',
                          '--format=$fullversion', KPKG)
        if kversion_current != kversion_source:
            msg += 'Kernel sources have been updated, kernel rebuild required.'

    send_message(msg)
    return 0

if __name__ == '__main__':
    exit(main())
