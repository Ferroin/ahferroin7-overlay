#!/bin/bash
#iosched-ctld, a simple shellscript to configure Linux I/O scheduler parameters
# Copyright (C) 2013  Austin S. Hemmelgarn
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

. /etc/iosched-ctld.conf

# If the parameters for CFQ and Deadline schedulers are defined in the
# configfile, use those definitions, otherwise use some sane defaults
cfq_params=${cfq_params:-"slice_idle back_seek_max back_seek_penalty fifo_expire_async fifo_expire_sync group_idle latency target_latency slice_async slice_async_rq slice_sync quantum"}
deadline_params=${deadline_params:-"read_expire write_expire fifo_batch writes_starved front_merges"}

# Used to configure the parameters for a given device.
# Takes two parameters, the device to configure, and the scheduler
# that it is using.
configure_params() {
    if grep -q "\\[${2}]" "/sys/block/${1}/queue/scheduler" ; then
        param_list="${2}_params"
        for param in ${!param_list} ; do
            global_param_var="${2}_all_${param}"
            param_var="${2}_${1}_${param}"
            param_value="${param_var:-${global_param_var}}"
            if [ ${param_value} ] ; then
                echo "${param_value}" > "/sys/block/${1}/queue/iosched/${param}"
            fi
        done
    else
        return 0
    fi
}

# Used to configure a device to use a given scheduler.
# Takes one parameter, the device to configure.
configure_device() {
    if [ -e "/sys/block/${1}" ] ; then
        sched="sched_${1}"
        sched="${!tmp}"
        sched="${sched:=${sched_all}}"
        if [ -z "${sched}" ] ; then
            sched=`grep -o '\[\w+]' "/sys/block/${1}/queue/scheduler"`
            sched=`echo ${sched} | grep -o '\w+'`
            configure_params ${1} ${sched}
            return 0
        fi
        echo "${sched}" > "/sys/block/${1}/queue/scheduler"
        configure_params ${1} ${sched}
        return 0
    else
        return 0
    fi
}

# Do a one-shot configuration of all the devices in /sys/block
for device in `ls /sys/block` ; do
    configure_device ${device}
done

# Set-up a inotify watcher to catch symlink creation in /sys/block when a
# when a device is hotplugged.
mkfifo -m 700 /tmp/iosched-ctld.pipe
inotifywait --daemon --outfile /tmp/iosched-ctld.pipe --event create --format "%f" "/sys/block"

# Loop forever, configuring hotplugged devices as they appear.
while true ; do
    for device in `cat /tmp/iosched-ctld.pipe` ; do
        (configure_device ${device}) &
        sleep 0.1
    done
    sleep 2
done
